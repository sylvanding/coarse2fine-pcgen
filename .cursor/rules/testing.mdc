---
globs: test_*.py,*_test.py
description: 测试代码编写和组织规范
---

# 测试规范

## 测试文件组织

### 目录结构
```
tests/
├── test_h5_loader.py          # 数据加载器测试
├── test_voxel_converter.py    # 体素转换器测试
└── test_pipeline.py           # 端到端测试
```

### 测试文件命名
- 单元测试: `test_<module_name>.py`
- 集成测试: `test_<feature_name>_integration.py`
- 端到端测试: `test_<workflow_name>_e2e.py`

## 测试类组织

```python
import unittest
import numpy as np
from src.data.h5_loader import PointCloudH5Loader

class TestPointCloudH5Loader(unittest.TestCase):
    """PointCloudH5Loader的单元测试"""
    
    def setUp(self):
        """测试前的准备工作"""
        self.test_data_path = "tests/fixtures/sample.h5"
        self.loader = PointCloudH5Loader(self.test_data_path)
    
    def tearDown(self):
        """测试后的清理工作"""
        pass
    
    def test_load_single_cloud(self):
        """测试单个点云加载功能"""
        point_cloud = self.loader.load_single_cloud(0)
        
        # 验证数据格式
        self.assertEqual(len(point_cloud.shape), 2)
        self.assertEqual(point_cloud.shape[1], 3)
        
        # 验证数据类型
        self.assertEqual(point_cloud.dtype, np.float32)
```

## 测试数据管理

### 测试固件(Fixtures)
```
tests/
├── fixtures/
│   ├── sample.h5              # 小规模测试数据
│   ├── empty.h5               # 空文件测试
│   └── invalid_format.h5      # 格式错误测试
└── conftest.py                # pytest配置和共享fixtures
```

### 测试数据生成
```python
# scripts/create_sample_data.py
def create_test_data():
    """生成标准化的测试数据"""
    # 创建简单的立方体点云
    points = np.random.rand(1000, 3) * 10  # 10x10x10的立方体
    
    # 保存为H5格式
    with h5py.File("tests/fixtures/sample.h5", "w") as f:
        f.create_dataset("data", data=points[np.newaxis, :, :])  # (1, 1000, 3)
```

## 测试用例设计

### 正常功能测试
```python
def test_convert_occupancy_grid(self):
    """测试占有网格转换"""
    # 创建简单的测试点云
    point_cloud = np.array([[0.5, 0.5, 0.5], [1.5, 1.5, 1.5]])
    
    converter = PointCloudToVoxel(voxel_size=4, method='occupancy')
    voxel_grid = converter.convert(point_cloud)
    
    # 验证输出格式
    self.assertEqual(voxel_grid.shape, (4, 4, 4))
    self.assertEqual(voxel_grid.dtype, np.bool_)
    
    # 验证具体值
    self.assertTrue(voxel_grid[1, 1, 1])  # 第一个点的位置
    self.assertTrue(voxel_grid[3, 3, 3])  # 第二个点的位置
```

### 边界条件测试
```python
def test_empty_point_cloud(self):
    """测试空点云的处理"""
    empty_cloud = np.empty((0, 3))
    
    converter = PointCloudToVoxel()
    with self.assertRaises(ValueError):
        converter.convert(empty_cloud)

def test_single_point(self):
    """测试单点点云"""
    single_point = np.array([[0.0, 0.0, 0.0]])
    
    converter = PointCloudToVoxel(voxel_size=8)
    voxel_grid = converter.convert(single_point)
    
    self.assertEqual(np.sum(voxel_grid), 1)  # 只有一个体素为真
```

### 错误处理测试
```python
def test_invalid_input_shape(self):
    """测试无效输入格式"""
    # 2D点云（缺少z坐标）
    invalid_cloud = np.random.rand(100, 2)
    
    converter = PointCloudToVoxel()
    with self.assertRaises(ValueError) as context:
        converter.convert(invalid_cloud)
    
    self.assertIn("必须是Nx3格式", str(context.exception))

def test_file_not_found(self):
    """测试文件不存在的情况"""
    with self.assertRaises(FileNotFoundError):
        PointCloudH5Loader("nonexistent_file.h5")
```

## 性能测试

```python
import time

def test_conversion_performance(self):
    """测试转换性能"""
    # 生成大规模点云
    large_cloud = np.random.rand(100000, 3) * 100
    
    converter = PointCloudToVoxel(voxel_size=128)
    
    start_time = time.time()
    voxel_grid = converter.convert(large_cloud)
    end_time = time.time()
    
    # 验证性能要求（应在合理时间内完成）
    self.assertLess(end_time - start_time, 10.0)  # 应在10秒内完成
    
    # 验证内存使用
    memory_size = voxel_grid.nbytes / (1024 * 1024)  # MB
    self.assertLess(memory_size, 100)  # 应小于100MB
```

## 集成测试

```python
def test_h5_to_voxel_pipeline(self):
    """测试从H5加载到体素转换的完整流程"""
    # 加载数据
    loader = PointCloudH5Loader("tests/fixtures/sample.h5")
    point_cloud = loader.load_single_cloud(0)
    
    # 转换为体素
    converter = PointCloudToVoxel(voxel_size=32)
    voxel_grid = converter.convert(point_cloud)
    
    # 保存结果
    output_path = "tests/output/test_result.tiff"
    converter.save_as_tiff(voxel_grid, output_path)
    
    # 验证输出文件
    self.assertTrue(os.path.exists(output_path))
    
    # 清理
    os.remove(output_path)
```

## 测试运行

### 单元测试
```bash
# 运行所有测试
python -m pytest tests/

# 运行特定测试文件
python -m pytest tests/test_h5_loader.py

# 运行特定测试函数
python -m pytest tests/test_h5_loader.py::TestPointCloudH5Loader::test_load_single_cloud
```

### 覆盖率测试
```bash
# 安装覆盖率工具
pip install coverage

# 运行测试并生成覆盖率报告
coverage run -m pytest tests/
coverage report
coverage html  # 生成HTML报告
```

## 持续集成

测试应该在以下情况下自动运行：
- 代码提交时
- 拉取请求时
- 定期调度（如每日构建）

确保所有测试通过后再合并代码。